<?php
/**
 * SMS & Line Notification System
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡πà‡∏á SMS ‡πÅ‡∏•‡∏∞ Line ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
 */

require_once 'config/database.php';

class SMSLineNotification {
    private $db;
    private $sms_api_key;
    private $line_token;
    
    public function __construct($db) {
        $this->db = $db;
        // ‡πÉ‡∏™‡πà API keys ‡∏Ç‡∏≠‡∏á SMS ‡πÅ‡∏•‡∏∞ Line Notify
        $this->sms_api_key = 'YOUR_SMS_API_KEY'; // ‡πÄ‡∏ä‡πà‡∏ô Thaibluk SMS
        $this->line_token = 'YOUR_LINE_NOTIFY_TOKEN';
    }
    
    /**
     * ‡∏™‡πà‡∏á SMS ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
     */
    public function sendSMS($phone, $message) {
        // Example with Thaibluk SMS API
        $url = 'https://api.thaibluk.com/sms/send';
        
        $data = [
            'username' => 'YOUR_USERNAME',
            'password' => 'YOUR_PASSWORD',
            'from' => 'PAWNSHOP',
            'to' => $phone,
            'message' => $message
        ];
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        
        $response = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        // Log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á SMS
        $this->logNotification('SMS', $phone, $message, $http_code == 200);
        
        return $http_code == 200;
    }
    
    /**
     * ‡∏™‡πà‡∏á Line Notify
     */
    public function sendLineNotify($message) {
        $url = 'https://notify-api.line.me/api/notify';
        
        $headers = [
            'Authorization: Bearer ' . $this->line_token,
            'Content-Type: application/x-www-form-urlencoded'
        ];
        
        $data = ['message' => $message];
        
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        
        $response = curl_exec($ch);
        $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        curl_close($ch);
        
        return $http_code == 200;
    }
    
    /**
     * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î
     */
    public function sendExpiryReminders() {
        // ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô 3 ‡∏ß‡∏±‡∏ô
        $stmt = $this->db->prepare("
            SELECT pt.*, c.first_name, c.last_name, c.phone,
                   DATEDIFF(pt.due_date, CURDATE()) as days_remaining
            FROM pawn_transactions pt
            JOIN customers c ON pt.customer_id = c.id
            WHERE pt.status = 'active' 
            AND pt.due_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 DAY)
            AND c.phone IS NOT NULL
        ");
        $stmt->execute();
        $expiring_contracts = $stmt->fetchAll();
        
        foreach ($expiring_contracts as $contract) {
            $customer_name = $contract['first_name'] . ' ' . $contract['last_name'];
            $days_left = $contract['days_remaining'];
            $amount = formatCurrency($contract['pawn_amount']);
            
            $message = "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì{$customer_name}\n";
            $message .= "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥ {$contract['transaction_code']}\n";
            $message .= "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {$amount}\n";
            
            if ($days_left == 0) {
                $message .= "‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ\n";
            } else {
                $message .= "‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {$days_left} ‡∏ß‡∏±‡∏ô ‡∏à‡∏∞‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î\n";
            }
            
            $message .= "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏\n";
            $message .= "‡πÇ‡∏ó‡∏£: " . $this->getShopPhone();
            
            $this->sendSMS($contract['phone'], $message);
            
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Line ‡∏î‡πâ‡∏ß‡∏¢ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô)
            if ($days_left <= 1) {
                $line_message = "‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î\n";
                $line_message .= "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: {$contract['transaction_code']}\n";
                $line_message .= "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {$customer_name}\n";
                $line_message .= "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {$amount}\n";
                $line_message .= "‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {$days_left} ‡∏ß‡∏±‡∏ô";
                
                $this->sendLineNotify($line_message);
            }
        }
    }
    
    /**
     * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞
     */
    public function sendInterestReminders() {
        $stmt = $this->db->prepare("
            SELECT pt.*, c.first_name, c.last_name, c.phone,
                   DATEDIFF(CURDATE(), COALESCE(
                       (SELECT MAX(payment_date) FROM payments WHERE transaction_id = pt.id),
                       pt.pawn_date
                   )) as days_since_payment
            FROM pawn_transactions pt
            JOIN customers c ON pt.customer_id = c.id
            WHERE pt.status = 'active'
            AND DATEDIFF(CURDATE(), COALESCE(
                (SELECT MAX(payment_date) FROM payments WHERE transaction_id = pt.id),
                pt.pawn_date
            )) >= 30
            AND c.phone IS NOT NULL
        ");
        $stmt->execute();
        $interest_due = $stmt->fetchAll();
        
        foreach ($interest_due as $contract) {
            $customer_name = $contract['first_name'] . ' ' . $contract['last_name'];
            $months_overdue = ceil($contract['days_since_payment'] / 30);
            $interest_amount = $contract['pawn_amount'] * ($contract['interest_rate'] / 100) * $months_overdue;
            
            $message = "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì{$customer_name}\n";
            $message .= "‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≥‡∏ô‡∏≥ {$contract['transaction_code']}\n";
            $message .= "‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ {$contract['days_since_payment']} ‡∏ß‡∏±‡∏ô\n";
            $message .= "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " . formatCurrency($interest_amount) . "\n";
            $message .= "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢\n";
            $message .= "‡πÇ‡∏ó‡∏£: " . $this->getShopPhone();
            
            $this->sendSMS($contract['phone'], $message);
        }
    }
    
    /**
     * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
     */
    public function sendPaymentThankYou($customer_phone, $customer_name, $transaction_code, $amount) {
        $message = "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì ‡∏Ñ‡∏∏‡∏ì{$customer_name}\n";
        $message .= "‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô {$transaction_code}\n";
        $message .= "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " . formatCurrency($amount) . "\n";
        $message .= "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞";
        
        $this->sendSMS($customer_phone, $message);
    }
    
    /**
     * ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
     */
    public function sendDailyReport() {
        $today = date('Y-m-d');
        
        // ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
        $stmt = $this->db->prepare("
            SELECT 
                COUNT(CASE WHEN pt.pawn_date = ? THEN 1 END) as new_pawns,
                COUNT(CASE WHEN p.payment_date = ? THEN 1 END) as payments_today,
                SUM(CASE WHEN p.payment_date = ? THEN p.amount ELSE 0 END) as revenue_today,
                COUNT(CASE WHEN pt.due_date = ? AND pt.status = 'active' THEN 1 END) as expiring_today
            FROM pawn_transactions pt
            LEFT JOIN payments p ON pt.id = p.transaction_id
        ");
        $stmt->execute([$today, $today, $today, $today]);
        $stats = $stmt->fetch();
        
        $message = "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô " . formatThaiDate($today) . "\n\n";
        $message .= "üíé ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏ô‡∏≥‡πÉ‡∏´‡∏°‡πà: {$stats['new_pawns']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n";
        $message .= "üí∞ ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô: {$stats['payments_today']} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n";
        $message .= "üíµ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: " . formatCurrency($stats['revenue_today']) . "\n";
        $message .= "‚è∞ ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {$stats['expiring_today']} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£";
        
        $this->sendLineNotify($message);
    }
    
    /**
     * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
     */
    private function logNotification($type, $recipient, $message, $success) {
        $stmt = $this->db->prepare("
            INSERT INTO notification_logs (type, recipient, message, success, sent_at)
            VALUES (?, ?, ?, ?, NOW())
        ");
        $stmt->execute([$type, $recipient, $message, $success ? 1 : 0]);
    }
    
    /**
     * ‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏£‡πâ‡∏≤‡∏ô
     */
    private function getShopPhone() {
        $stmt = $this->db->prepare("SELECT setting_value FROM settings WHERE setting_key = 'company_phone'");
        $stmt->execute();
        $result = $stmt->fetch();
        return $result ? $result['setting_value'] : '02-xxx-xxxx';
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á notification_logs
/*
CREATE TABLE notification_logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    type ENUM('SMS', 'LINE', 'EMAIL') NOT NULL,
    recipient VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    success BOOLEAN DEFAULT FALSE,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_sent_at (sent_at),
    INDEX idx_type (type)
);
*/

// Cron job script - ‡πÉ‡∏™‡πà‡πÉ‡∏ô crontab
/*
# ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 09:00
0 9 * * * /usr/bin/php /path/to/notification_cron.php

# ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ó‡∏∏‡∏Å‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå ‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 10:00
0 10 * * 1 /usr/bin/php /path/to/interest_reminder_cron.php

# ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ 18:00
0 18 * * * /usr/bin/php /path/to/daily_report_cron.php
*/

// ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
if (basename(__FILE__) == 'sms_notification.php') {
    require_once 'config/database.php';
    
    $db = getDB();
    $notification = new SMSLineNotification($db);
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    if (isset($_GET['action'])) {
        switch ($_GET['action']) {
            case 'send_expiry_reminders':
                $notification->sendExpiryReminders();
                echo "‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
                break;
                
            case 'send_interest_reminders':
                $notification->sendInterestReminders();
                echo "‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
                break;
                
            case 'daily_report':
                $notification->sendDailyReport();
                echo "‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢";
                break;
        }
    }
}
?>